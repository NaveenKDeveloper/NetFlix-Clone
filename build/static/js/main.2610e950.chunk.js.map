{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","console","table","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substring","Nav","show","handleshow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4SAMeA,E,OAJEC,EAAMC,OAAO,CAC1BC,QAAS,iC,wCC8EEC,MAvEf,YAA+C,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WAAc,EAEdC,mBAAS,IAFK,mBAEnCC,EAFmC,KAE3BC,EAF2B,OAGNF,mBAAS,IAHH,mBAGnCG,EAHmC,KAGvBC,EAHuB,KA4C1C,OAvCAC,qBAAU,WAAM,4CAEZ,4BAAAC,EAAA,sEAC0Bb,EAAMc,IAAIT,GADpC,cACUU,EADV,OAEIN,EAAUM,EAAQC,KAAKC,SAF3B,kBAGWF,GAHX,4CAFY,uBAAC,WAAD,wBAQZG,KACD,CAACb,IA2BJc,QAAQC,MAAMZ,GAIV,sBAAKa,UAAU,MAAf,UACI,6BAAKjB,IAEL,qBAAKiB,UAAU,cAAf,SACKb,EAAOc,KAAI,SAACC,GAAD,OACR,qBAEAC,QAAS,kBA1BL,SAACD,GAEbb,EACAC,EAAc,IAEdc,KAAkB,OAALF,QAAK,IAALA,OAAA,EAAAA,EAAOG,OAAQ,IAC3BC,MAAK,SAACC,GACH,IAAMC,EAAY,IAAIC,gBAAgB,IAAIC,IAAIH,GAAKI,QACnDrB,EAAckB,EAAUf,IAAI,SAE/BmB,OAAM,SAACC,GAAD,OAAYf,QAAQgB,IAAID,MAgBRE,CAAYb,IAC3BF,UAAS,qBAAgBf,GAAc,mBACvC+B,IAAG,UAxDN,wCAwDM,OACC/B,EAAaiB,EAAMe,YAAcf,EAAMgB,eAE3CC,IAAKjB,EAAMG,MANNH,EAAMkB,SAWlB/B,GAAc,cAAC,IAAD,CAASgC,QAAShC,EAAYiC,KA9CzC,CACRC,OAAQ,MACRC,MAAO,OACPC,WAAY,CAGRC,SAAU,UChChBC,EAAU,mCAaDC,EAXE,CACbC,cAAc,8BAAD,OAAgCF,EAAhC,mBACbG,sBAAsB,wBAAD,OAA0BH,EAA1B,sBACrBI,cAAc,4BAAD,OAA8BJ,EAA9B,mBACbK,kBAAkB,2BAAD,OAA6BL,EAA7B,mBACjBM,kBAAkB,2BAAD,OAA6BN,EAA7B,mBACjBO,kBAAkB,2BAAD,OAA6BP,EAA7B,mBACjBQ,mBAAmB,2BAAD,OAA6BR,EAA7B,sBAClBS,mBAAmB,2BAAD,OAA6BT,EAA7B,oB,MCqDPU,MA1Df,WAAmB,IAkBGC,EAAIC,EAlBR,EACYrD,mBAAS,IADrB,mBACPgB,EADO,KACAsC,EADA,KAsBd,OAnBAjD,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEAC0Bb,EAAMc,IAAImC,EAASE,uBAD7C,cACUpC,EADV,OAEI8C,EACC9C,EAAQC,KAAKC,QACV6C,KAAKC,MAAMD,KAAKE,SAAWjD,EAAQC,KAAKC,QAAQgD,OAAS,KAJjE,kBAOWlD,GAPX,4CADY,uBAAC,WAAD,wBAUZG,KAED,IASH,yBAAQG,UAAU,SAChB6C,MAAO,CACJC,eAAgB,QAChBC,gBAAgB,2DAAD,cAC4B7C,QAD5B,IAC4BA,OAD5B,EAC4BA,EAAOgB,cADnC,iBAGf8B,mBAAoB,iBANzB,UAUC,sBAAKhD,UAAU,kBAAf,UAEA,oBAAIA,UAAU,eAAd,UACU,OAALE,QAAK,IAALA,OAAA,EAAAA,EAAOnB,SAAP,OAAgBmB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOG,QAAvB,OAA+BH,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAO+C,iBAG3C,sBAAKjD,UAAU,iBAAf,UACG,wBAAQA,UAAU,gBAAlB,mBACA,wBAAQA,UAAU,gBAAlB,0BAGH,qBAAIA,UAAU,qBAAd,iBAAoCE,QAApC,IAAoCA,OAApC,EAAoCA,EAAOgD,UA3B1BZ,EA4BN,OAACpC,QAAD,IAACA,OAAD,EAACA,EAAOgD,SA5BEX,EA4BQ,KA3BhB,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKM,QAASL,EAAID,EAAIa,UAAU,EAAGZ,EAAI,GAAK,MAAQD,SAkC3D,qBAAKtC,UAAU,2B,MChBRoD,MAvCf,WAAgB,IAAD,EACelE,oBAAS,GADxB,mBACJmE,EADI,KACEC,EADF,KAkBX,OAfA/D,qBAAU,WAQN,OANAgE,OAAOC,iBAAiB,UAAU,WAC3BD,OAAOE,QAAU,IAChBH,GAAW,GAERA,GAAW,MAEf,WACHC,OAAOG,oBAAoB,aAIjC,IAGF,sBAAK1D,UAAS,cAASqD,GAAQ,aAA/B,UACI,qBAAKrD,UAAU,WACfgB,IAAI,6EACJG,IAAI,iBAGJ,qBAAKnB,UAAU,aACfgB,IAAI,yEACJG,IAAI,qBCDGwC,MAtBf,WACE,OACE,sBAAK3D,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,CAAKjB,MAAM,oBAAoBC,SAAU4C,EAASE,sBAClD7C,YAAY,IAEZ,cAAC,EAAD,CAAKF,MAAM,eAAeC,SAAU4C,EAASC,gBAC7C,cAAC,EAAD,CAAK9C,MAAM,YAAYC,SAAU4C,EAASG,gBAC1C,cAAC,EAAD,CAAKhD,MAAM,gBAAgBC,SAAU4C,EAASI,oBAC9C,cAAC,EAAD,CAAKjD,MAAM,gBAAgBC,SAAU4C,EAASK,oBAC9C,cAAC,EAAD,CAAKlD,MAAM,gBAAgBC,SAAU4C,EAASM,oBAC9C,cAAC,EAAD,CAAKnD,MAAM,iBAAiBC,SAAU4C,EAASO,qBAC/C,cAAC,EAAD,CAAKpD,MAAM,gBAAgBC,SAAU4C,EAASQ,yBCTrCwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxD,MAAK,YAAkD,IAA/CyD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2610e950.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.themoviedb.org/3',\r\n});\r\n\r\nexport default instance;","import React, {useState, useEffect} from 'react';\r\nimport axios from './axios';\r\nimport './Row.css';\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\n\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\"); \r\n\r\n    useEffect(() => {\r\n\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    const opts= {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n\r\n           // htpps://developers.google.com/youtube/player_parameters \r\n            autoplay: 1,\r\n        },\r\n    };\r\n\r\n    const handleClick = (movie) => {\r\n\r\n        if (trailerUrl) {\r\n            setTrailerUrl(\"\");\r\n        } else {\r\n            movieTrailer(movie?.name || \"\")\r\n            .then((url) => {\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get(\"v\"));\r\n            })\r\n            .catch((error)  => console.log(error));\r\n        }\r\n\r\n    };\r\n\r\n    console.table(movies);\r\n\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"row_posters\">\r\n                {movies.map((movie) => (\r\n                    <img \r\n                    key={movie.id}\r\n                    onClick={() => handleClick(movie)}\r\n                    className={`row_poster ${isLargeRow && \"row_posterlarge\"}`}\r\n                    src={`${base_url}${\r\n                        isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                    }`} \r\n                    alt={movie.name}\r\n                    />\r\n                \r\n                 ))}\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n\r\n        \r\n        \r\n    );\r\n\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = \"111eee1f3d57c072bd3018a41eb88ae8\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport './banner.css'\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async  function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n             request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length - 1)\r\n             ]\r\n            );\r\n            return request;\r\n        }\r\n        fetchData();\r\n\r\n    }, []\r\n    );\r\n\r\n    function truncate(str,n) {\r\n        return str?.length > n ? str.substring(0, n - 1) + \"...\" : str;\r\n    } \r\n\r\n    return (\r\n        \r\n    <header className=\"banner\" \r\n      style={{\r\n         backgroundSize: \"cover\",\r\n         backgroundImage: `url(\r\n             \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n         )`,\r\n         backgroundPosition: \"center center\",\r\n        }}\r\n    > \r\n\r\n     <div className=\"banner_contents\">\r\n\r\n     <h1 className=\"banner_title\">\r\n         {movie?.title || movie?.name || movie?.original_name}\r\n     </h1>\r\n\r\n     <div className=\"banner_buttons\">\r\n        <button className=\"banner_button\">Play </button>  \r\n        <button className=\"banner_button\">  My List</button> \r\n     </div>\r\n\r\n     <h1 className=\"banner_description\">{movie?.overview}\r\n       {truncate(movie?.overview, 150)} \r\n     </h1>\r\n     </div>\r\n\r\n     \r\n\r\n\r\n        <div className=\"banner--fadeBottom\" />\r\n    </header>\r\n   );\r\n}\r\n\r\nexport default Banner;","import React, { useEffect, useState } from 'react';\r\nimport './Nav.css'\r\n\r\nfunction Nav() {\r\n    const [show, handleshow]= useState(false);\r\n    \r\n    useEffect(() => {\r\n\r\n        window.addEventListener(\"scroll\", () => {\r\n            if(window.scrollY > 100) {\r\n                handleshow(true);\r\n\r\n            } else handleshow(false);\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n\r\n\r\n    },[])\r\n\r\n    return (\r\n    <div className={`nav ${show && \"nav_black\"}`}>\r\n        <img className=\"nav_logo\"\r\n        src=\"https://fontmeme.com/permalink/210208/b0696afbcaf3ea64753e19abc5805044.png\"\r\n        alt=\"Netflix logo\" \r\n        />\r\n\r\n        <img className=\"nav_avatar\"\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n        alt=\"Netflix logo\" \r\n        />\r\n\r\n    \r\n\r\n    </div>\r\n\r\n\r\n    );\r\n        \r\n}\r\n\r\nexport default Nav","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner />\n      <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} \n      isLargeRow={true}\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n      \n\n    \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}